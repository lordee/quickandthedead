Class_t Classes[6] = {
    {
        CLASS_NONE,
        STRING_NONE,
        MODEL_NONE,
        MODEL_MIN_NONE,
        MODEL_MAX_NONE,
        MODEL_VIEWOFFSET_NONE,
        MODEL_HEAD_NONE,
        0,
        player_stand1,
        player_run,
        player_pain,
        player_diea1,
        player_attack,
        player_stand1,
        player_stand1,
        SOUND_PAIN_NONE,
        SOUND_DEATH_NONE,
        SOUND_AASHOOT_NONE,
        SOUND_AAHIT_NONE,
        SOUND_AAHITWALL_NONE,
        SOUND_SKILLONE_CAST_NONE,
        SOUND_SKILLTWO_CAST_NONE,
        BASEAD_NONE,
        BASEHEALTH_NONE,
        BASESPEED_NONE,
        BASEATTACKFINISH_NONE,
        SKILLONE_NONE,
        SKILLONE_COOLDOWN_NONE,
        SKILLONE_DAMAGE_NONE,
        SKILLONE_RANGE_NONE,
        0,
        0,
        0,
        0,
        SKILLTWO_NONE,
        SKILLTWO_COOLDOWN_NONE,
        SKILLTWO_DAMAGE_NONE,
        SKILLTWO_RANGE_NONE,
        0,
        0,
        0,
        0,
        ITEMS_NONE,
        AMMO_ROCKETS_NONE,
        AMMO_NAILS_NONE,
        AMMO_SHELLS_NONE,
        AMMO_CELLS_NONE,
        ARMORTYPE_NONE,
        ARMORVALUE_NONE,
        WEAPON_NONE,
        FLAGS_CLASSNONE,
        WATERLEVEL_NONE,
        TAKEDAMAGE_NONE,
        SOLID_NONE,
        MOVETYPE_CLASSNONE,
        WEAPONMODEL_NONE
    },
    {
        CLASS_SURVIVOR,
        STRING_SURVIVOR,
        MODEL_SURVIVOR,
        MODEL_MIN_SURVIVOR,
        MODEL_MAX_SURVIVOR,
        MODEL_VIEWOFFSET_SURVIVOR,
        MODEL_HEAD_SURVIVOR,
        0,
        player_stand1,
        player_run,
        player_pain,
        player_diea1,
        player_attack,
        player_stand1,
        player_stand1,
        SOUND_PAIN_SURVIVOR,
        SOUND_DEATH_SURVIVOR,
        SOUND_AASHOOT_SURVIVOR,
        SOUND_AAHIT_SURVIVOR,
        SOUND_AAHITWALL_SURVIVOR,
        SOUND_SKILLONE_CAST_SURVIVOR,
        SOUND_SKILLTWO_CAST_SURVIVOR,
        BASEAD_SURVIVOR,
        BASEHEALTH_SURVIVOR,
        BASESPEED_SURVIVOR,
        BASEATTACKFINISH_SURVIVOR,
        SKILLONE_SURVIVOR,
        SKILLONE_COOLDOWN_SURVIVOR,
        SKILLONE_DAMAGE_SURVIVOR,
        SKILLONE_RANGE_SURVIVOR,
        0,
        0,
        0,
        0,
        SKILLTWO_SURVIVOR,
        SKILLTWO_COOLDOWN_SURVIVOR,
        SKILLTWO_DAMAGE_SURVIVOR,
        SKILLTWO_RANGE_SURVIVOR,
        0,
        0,
        0,
        0,
        ITEMS_SURVIVOR,
        AMMO_ROCKETS_SURVIVOR,
        AMMO_NAILS_SURVIVOR,
        AMMO_SHELLS_SURVIVOR,
        AMMO_CELLS_SURVIVOR,
        ARMORTYPE_SURVIVOR,
        ARMORVALUE_SURVIVOR,
        WEAPON_SURVIVOR,
        FLAGS_SURVIVOR,
        WATERLEVEL_SURVIVOR,
        TAKEDAMAGE_SURVIVOR,
        SOLID_SURVIVOR,
        MOVETYPE_SURVIVOR,
        WEAPONMODEL_SURVIVOR
    },
    {
        CLASS_FIEND,
        STRING_FIEND,
        MODEL_FIEND,
        MODEL_MIN_FIEND,
        MODEL_MAX_FIEND,
        MODEL_VIEWOFFSET_FIEND,
        MODEL_HEAD_FIEND,
        0,
        classfiend_stand,
        classfiend_run,
        classfiend_pain,
        classfiend_die,
        classfiend_attack,
        classfiend_skillone,
        classfiend_skilltwo,
        SOUND_PAIN_FIEND,
        SOUND_DEATH_FIEND,
        SOUND_AASHOOT_FIEND,
        SOUND_AAHIT_FIEND,
        SOUND_AAHITWALL_FIEND,
        SOUND_SKILLONE_CAST_FIEND,
        SOUND_SKILLTWO_CAST_FIEND,
        BASEAD_FIEND,
        BASEHEALTH_FIEND,
        BASESPEED_FIEND,
        BASEATTACKFINISH_FIEND,
        SKILLONE_FIEND,
        SKILLONE_COOLDOWN_FIEND,
        SKILLONE_DAMAGE_FIEND,
        SKILLONE_RANGE_FIEND,
        0,
        0,
        0,
        0,
        SKILLTWO_FIEND,
        SKILLTWO_COOLDOWN_FIEND,
        SKILLTWO_DAMAGE_FIEND,
        SKILLTWO_RANGE_FIEND,
        0,
        0,
        0,
        0,
        ITEMS_FIEND,
        AMMO_ROCKETS_FIEND,
        AMMO_NAILS_FIEND,
        AMMO_SHELLS_FIEND,
        AMMO_CELLS_FIEND,
        ARMORTYPE_FIEND,
        ARMORVALUE_FIEND,
        WEAPON_FIEND,
        FLAGS_FIEND,
        WATERLEVEL_FIEND,
        TAKEDAMAGE_FIEND,
        SOLID_FIEND,
        MOVETYPE_FIEND,
        WEAPONMODEL_FIEND

    },
    {
        CLASS_SHAMBLER,
        STRING_SHAMBLER,
        MODEL_SHAMBLER,
        MODEL_MIN_SHAMBLER,
        MODEL_MAX_SHAMBLER,
        MODEL_VIEWOFFSET_SHAMBLER,
        MODEL_HEAD_SHAMBLER,
        0,
        classsham_stand,
        classsham_run,
        classsham_pain,
        classsham_die,
        classsham_attack,
        classsham_skillone,
        classsham_skilltwo,
        SOUND_PAIN_SHAMBLER,
        SOUND_DEATH_SHAMBLER,
        SOUND_AASHOOT_SHAMBLER,
        SOUND_AAHIT_SHAMBLER,
        SOUND_AAHITWALL_SHAMBLER,
        SOUND_SKILLONE_CAST_SHAMBLER,
        SOUND_SKILLTWO_CAST_SHAMBLER,
        BASEAD_SHAMBLER,
        BASEHEALTH_SHAMBLER,
        BASESPEED_SHAMBLER,
        BASEATTACKFINISH_SHAMBLER,
        SKILLONE_SHAMBLER,
        SKILLONE_COOLDOWN_SHAMBLER,
        SKILLONE_DAMAGE_SHAMBLER,
        SKILLONE_RANGE_SHAMBLER,
        0,
        DEBUFF_STUN_MOVEALLOWED,
        SKILLONE_LIFETIME_SHAMBLER,
        SKILLONE_TICKRATE_SHAMBLER,
        SKILLTWO_SHAMBLER,
        SKILLTWO_COOLDOWN_SHAMBLER,
        SKILLTWO_DAMAGE_SHAMBLER,
        SKILLTWO_RANGE_SHAMBLER,
        0,
        DEBUFF_STUN_MOVEALLOWED,
        SKILLTWO_LIFETIME_SHAMBLER,
        SKILLTWO_TICKRATE_SHAMBLER,
        ITEMS_SHAMBLER,
        AMMO_ROCKETS_SHAMBLER,
        AMMO_NAILS_SHAMBLER,
        AMMO_SHELLS_SHAMBLER,
        AMMO_CELLS_SHAMBLER,
        ARMORTYPE_SHAMBLER,
        ARMORVALUE_SHAMBLER,
        WEAPON_SHAMBLER,
        FLAGS_SHAMBLER,
        WATERLEVEL_SHAMBLER,
        TAKEDAMAGE_SHAMBLER,
        SOLID_SHAMBLER,
        MOVETYPE_SHAMBLER,
        WEAPONMODEL_SHAMBLER
    },
    {
        CLASS_UNDEADKING,
        STRING_UNDEADKING,
        MODEL_UNDEADKING,
        MODEL_MIN_UNDEADKING,
        MODEL_MAX_UNDEADKING,
        MODEL_VIEWOFFSET_UNDEADKING,
        MODEL_HEAD_UNDEADKING,
        0,
        classundeadking_stand,
        classundeadking_run,
        classundeadking_pain,
        classundeadking_die,
        classundeadking_attack,
        classundeadking_skillone,
        classundeadking_skilltwo,
        SOUND_PAIN_UNDEADKING,
        SOUND_DEATH_UNDEADKING,
        SOUND_AASHOOT_UNDEADKING,
        SOUND_AAHIT_UNDEADKING,
        SOUND_AAHITWALL_UNDEADKING,
        SOUND_SKILLONE_CAST_UNDEADKING,
        SOUND_SKILLTWO_CAST_UNDEADKING,
        BASEAD_UNDEADKING,
        BASEHEALTH_UNDEADKING,
        BASESPEED_UNDEADKING,
        BASEATTACKFINISH_UNDEADKING,
        SKILLONE_UNDEADKING,
        SKILLONE_COOLDOWN_UNDEADKING,
        SKILLONE_DAMAGE_UNDEADKING,
        SKILLONE_RANGE_UNDEADKING,
        0,
        0,
        0,
        0,
        SKILLTWO_UNDEADKING,
        SKILLTWO_COOLDOWN_UNDEADKING,
        SKILLTWO_DAMAGE_UNDEADKING,
        SKILLTWO_RANGE_UNDEADKING,
        0,
        0,
        0,
        0,
        ITEMS_UNDEADKING,
        AMMO_ROCKETS_UNDEADKING,
        AMMO_NAILS_UNDEADKING,
        AMMO_SHELLS_UNDEADKING,
        AMMO_CELLS_UNDEADKING,
        ARMORTYPE_UNDEADKING,
        ARMORVALUE_UNDEADKING,
        WEAPON_UNDEADKING,
        FLAGS_UNDEADKING,
        WATERLEVEL_UNDEADKING,
        TAKEDAMAGE_UNDEADKING,
        SOLID_UNDEADKING,
        MOVETYPE_UNDEADKING,
        WEAPONMODEL_UNDEADKING
    },
    {
        CLASS_LEASH,
        STRING_LEASH,
        MODEL_LEASH,
        MODEL_MIN_LEASH,
        MODEL_MAX_LEASH,
        MODEL_VIEWOFFSET_LEASH,
        MODEL_HEAD_LEASH,
        0,
        classleash_stand,
        classleash_run,
        classleash_pain,
        classleash_die,
        classleash_attack,
        classleash_skillone,
        classleash_skilltwo,
        SOUND_PAIN_LEASH,
        SOUND_DEATH_LEASH,
        SOUND_AASHOOT_LEASH,
        SOUND_AAHIT_LEASH,
        SOUND_AAHITWALL_LEASH,
        SOUND_SKILLONE_CAST_LEASH,
        SOUND_SKILLTWO_CAST_LEASH,
        BASEAD_LEASH,
        BASEHEALTH_LEASH,
        BASESPEED_LEASH,
        BASEATTACKFINISH_LEASH,
        SKILLONE_LEASH,
        SKILLONE_COOLDOWN_LEASH,
        SKILLONE_DAMAGE_LEASH,
        SKILLONE_RANGE_LEASH,
        0,
        0,
        0,
        0,
        SKILLTWO_LEASH,
        SKILLTWO_COOLDOWN_LEASH,
        SKILLTWO_DAMAGE_LEASH,
        SKILLTWO_RANGE_LEASH,
        0,
        0,
        0,
        0,
        ITEMS_LEASH,
        AMMO_ROCKETS_LEASH,
        AMMO_NAILS_LEASH,
        AMMO_SHELLS_LEASH,
        AMMO_CELLS_LEASH,
        ARMORTYPE_LEASH,
        ARMORVALUE_LEASH,
        WEAPON_LEASH,
        FLAGS_LEASH,
        WATERLEVEL_LEASH,
        TAKEDAMAGE_LEASH,
        SOLID_LEASH,
        MOVETYPE_LEASH,
        WEAPONMODEL_LEASH
    }
};


void GetClass(float id)
{
    for (float i = 0; i < Classes.length; i++)
    {
        if (Classes[i].classtype == id)
        {
            selfclass = Classes[i];
            return;
        }
    }
}

void ClassRun(entity player)
{
    GetClass(player.class);

    self = player;
    selfclass.runfunc();
}

float ClassRunFunc(f_void standfunc, float wframemax)
{
    self.weaponframe=0;
	if (!self.velocity_x && !self.velocity_y)
	{
		self.walkframe=0;
		standfunc();
		return FALSE;
	}

	if (self.walkframe >= wframemax)
		self.walkframe = 0;

	return TRUE;
}

void ClassStand(entity player)
{
    GetClass(player.class);
    self = player;

    selfclass.standfunc();
}

float ClassStandFunc(f_void runfunc, float wframemax)
{
	if (self.velocity_x || self.velocity_y)
	{
		self.walkframe=0;
		runfunc();
		return FALSE;
	}

	if (self.walkframe >= wframemax)
		self.walkframe = 0;

	return TRUE;
}

void ClassPain(entity attacker, float damage)
{
    GetClass(self.class);
    selfclass.painfunc(attacker, damage);
}

void ClassDie()
{
    GetClass(self.class);
    selfclass.diefunc();
}

void ClassUseSkill(entity player, float skillnum)
{
    if (!skillnum)
    {
        sprint(player, PRINT_HIGH, "No skill selected!\n");
        return;
    }

    GetClass(player.class);
    // bad code
    if (skillnum == 1)
    {
        if (player.skill_one_cooldown_time <= time)
        {
            player.skill_one_cooldown_time = time + player.skill_one_cooldown;
            sound(player, CHAN_WEAPON, selfclass.sound_skillone_cast, 1, ATTN_NORM);
            selfclass.skillonefunc();
            
            player.state = player.state | PSTATE_SKILLONECD;
        }
        else
        {
            sprint(player, PRINT_HIGH, "Skill is on cooldown!\n");
        }
    }
    else if (skillnum == 2)
    {
        if (player.skill_two_cooldown_time <= time)
        {
            sound(player, CHAN_WEAPON, selfclass.sound_skilltwo_cast, 1, ATTN_NORM);
            selfclass.skilltwofunc();
            player.skill_two_cooldown_time = time + player.skill_two_cooldown;
            player.state = player.state | PSTATE_SKILLTWOCD;
        }
        else
        {
            sprint(player, PRINT_HIGH, "Skill is on cooldown!\n");
        }
    }
}

void ClassChangeActiveSkill(entity player)
{
    player.skill_selected = player.impulse;
    sprint(player, PRINT_HIGH, "Skill ", ftos(player.skill_selected), " selected.\n");
}

void ClassCoolDownCheck(entity player)
{
    if (player.skill_one_cooldown > 0)
    {
        if (player.skill_one_cooldown_time <= time)
        {
            if (player.state & PSTATE_SKILLONECD)
            {
                // remove it
                player.state = player.state - (player.state & PSTATE_SKILLONECD);
                // TODO - use skill names
                sprint(player, PRINT_HIGH, "Skill 1 ready\n");
            }
        }
    }
    
    if (player.skill_two_cooldown > 0)
    {
        if (player.skill_two_cooldown_time <= time)
        {
            if (player.state & PSTATE_SKILLTWOCD)
            {
                // remove it
                player.state = player.state - (player.state & PSTATE_SKILLTWOCD);
                sprint(player, PRINT_HIGH, "Skill 2 ready\n");
            }
        }
    }
}

void ClassAttack()
{
    if (self.attack_finished >= time)
        return;

    self.walkframe = 0;
    GetClass(self.class);
    self.attack_finished = time + selfclass.baseattackfinish;
    selfclass.attackfunc();
}

void (entity player) Use = {
    // if pointed at a downed player
    makevectors(player.v_angle);
    vector source;
    source = player.origin + player.view_ofs;
    traceline(source, source + v_forward * 64, MOVE_HITMODEL | MOVE_EVERYTHING, player);

    if (trace_ent)
    {
        if (trace_ent.team_no == player.team_no)
        {
            // start/continue revive process
            RevivePlayer(player, trace_ent);
        }
    }
    else
    {
        if (player.state & PSTATE_REVIVING)
        {
            sprint(player, PRINT_HIGH, "Reviving paused\n");
            player.state = player.state - (player.state & PSTATE_REVIVING);
		    player.movetype = MOVETYPE_WALK;
        }
    }
};